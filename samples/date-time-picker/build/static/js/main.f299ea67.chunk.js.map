{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Globalize","load","require","locale","globalizeLocalizer","App","useState","brxmConfig","setBrxmConfig","ui","setUi","docDate","setDocDate","useEffect","UiExtension","register","then","document","field","getValue","value","currentDocDate","Date","parseInt","JSON","parse","extension","config","editFormat","raw","defaultValue","format","time","showTime","readonly","readOnly","dropUp","onCurrentDateChange","currentDate","setValue","getTime","console","log","catch","e","step","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iQAQAA,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MAGvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUC,KAAKC,EAAQ,MACvBF,IAAUG,OAAO,MACjBC,MA6CeC,MA3Cf,WAAgB,IAAD,EAEyBC,mBAAS,MAFlC,mBAEJC,EAFI,KAEQC,EAFR,OAGSF,mBAAS,MAHlB,mBAGJG,EAHI,KAGAC,EAHA,OAImBJ,mBAAS,MAJ5B,mBAIJK,EAJI,KAIKC,EAJL,KAwBX,OAlBAC,qBAAU,WACNC,IAAYC,WAAWC,MAAK,SAACP,GACzBA,EAAGQ,SAASC,MAAMC,WAAWH,MAAK,SAAAI,GAC9B,GAAIA,EAAO,CACP,IAAIC,EAAiB,IAAIC,KAAKC,SAASH,IACvCR,EAAWS,OAGnBX,EAAMD,GACND,EAAcgB,KAAKC,MAAMhB,EAAGiB,UAAUC,cAE3C,IAOEpB,EAKD,kBAAC,IAAD,CACIqB,WAAY,CAACC,IAAKtB,EAAWqB,YAC7BE,aAAcnB,EACdS,MAAOT,EACPoB,OAAQ,CAACF,IAAKtB,EAAWwB,QACzBC,KAAMzB,EAAW0B,SACjBC,SAAU3B,EAAW4B,SACrBC,OAAQ7B,EAAW6B,OACnBC,oBAlBR,SAA4BC,GACxB1B,EAAW0B,GACX7B,EAAGQ,SAASC,MAAMqB,SAASD,EAAYE,WAAWxB,MAAK,kBAAMyB,QAAQC,IAAI,gEAA8DC,OAAM,SAACC,GAAD,OAAOH,QAAQC,IAAI,8CAA+CE,OAiB3MC,KAAMtC,EAAWsC,OAbd,+BC9DKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASoC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACLlB,QAAQkB,MAAMA,EAAMC,a","file":"static/js/main.f299ea67.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker'\nimport Globalize from 'globalize';\nimport globalizeLocalizer from 'react-widgets-globalize';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport UiExtension from '@bloomreach/ui-extension';\n\nGlobalize.load(require(\"cldr-data/main/en/ca-buddhist.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-ethiopic.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-islamic-civil.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-chinese.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-japanese.json\"));\nGlobalize.load(require(\"cldr-data/main/en/currencies.json\"));\nGlobalize.load(require(\"cldr-data/main/en/listPatterns.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-generic.json\"));\nGlobalize.load(require(\"cldr-data/main/en/scripts.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-islamic-rgsa.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-persian.json\"));\nGlobalize.load(require(\"cldr-data/main/en/dateFields.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-coptic.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-gregorian.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-islamic-tbla.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-roc.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-dangi.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-hebrew.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-ethiopic-amete-alem.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-islamic.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-islamic-umalqura.json\"));\nGlobalize.load(require(\"cldr-data/main/en/ca-indian.json\"));\nGlobalize.load(require(\"cldr-data/main/en/delimiters.json\"));\nGlobalize.load(require(\"cldr-data/main/en/characters.json\"));\nGlobalize.load(require(\"cldr-data/main/en/layout.json\"));\nGlobalize.load(require(\"cldr-data/main/en/languages.json\"));\nGlobalize.load(require(\"cldr-data/main/en/localeDisplayNames.json\"));\nGlobalize.load(require(\"cldr-data/main/en/territories.json\"));\nGlobalize.load(require(\"cldr-data/main/en/numbers.json\"));\nGlobalize.load(require(\"cldr-data/main/en/posix.json\"));\nGlobalize.load(require(\"cldr-data/main/en/measurementSystemNames.json\"));\nGlobalize.load(require(\"cldr-data/main/en/timeZoneNames.json\"));\nGlobalize.load(require(\"cldr-data/main/en/units.json\"));\nGlobalize.load(require(\"cldr-data/main/en/variants.json\"));\n// Globalize.load(require(\"cldr-data\").entireSupplemental());\n\nGlobalize.load(require(\"cldr-data/supplemental/likelySubtags\"));\nGlobalize.load(require(\"cldr-data/supplemental/timeData\"));\nGlobalize.locale('en');\nglobalizeLocalizer();\n\nfunction App() {\n\n    const [brxmConfig, setBrxmConfig] = useState(null);\n    const [ui, setUi] = useState(null);\n    const [docDate, setDocDate] = useState(null);\n\n    useEffect(() => {\n        UiExtension.register().then((ui) => {\n            ui.document.field.getValue().then(value => {\n                if (value) {\n                    let currentDocDate = new Date(parseInt(value));\n                    setDocDate(currentDocDate);\n                }\n            });\n            setUi(ui);\n            setBrxmConfig(JSON.parse(ui.extension.config));\n        });\n    }, []);\n\n    function currentDateChanged(currentDate) {\n        setDocDate(currentDate);\n        ui.document.field.setValue(currentDate.getTime()).then(() => console.log(\"Datetimepicker set current date on document is successful\")).catch((e) => console.log(\"Error trying to set picked date on document\", e));\n    }\n\n    if (!brxmConfig) {\n        return <div/>\n    }\n\n    return (\n        <DateTimePicker\n            editFormat={{raw: brxmConfig.editFormat}}\n            defaultValue={docDate}\n            value={docDate}\n            format={{raw: brxmConfig.format}}\n            time={brxmConfig.showTime}\n            readonly={brxmConfig.readOnly}\n            dropUp={brxmConfig.dropUp}\n            onCurrentDateChange={currentDateChanged}\n            step={brxmConfig.step}\n        />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}